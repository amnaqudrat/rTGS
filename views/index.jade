doctype html
html
  head
    link(type='text/css', rel='stylesheet', href='/css/jquery-ui.css')
    link(type='text/css', rel='stylesheet', href='/src/css/graph.css')
    link(type='text/css', rel='stylesheet', href='/src/css/detail.css')
    link(type='text/css', rel='stylesheet', href='/src/css/legend.css')
    link(type='text/css', rel='stylesheet', href='/css/extensions.css?v=2')
    script(src='/js/jquery.min.js')
    script(src='/vendor/d3.v3.js')
    script.
      jQuery.noConflict();
    script(src='/js/jquery-ui.min.js')
    script(src='/src/js/Rickshaw.js')
    script(src='/src/js/Rickshaw.Class.js')
    script(src='/src/js/Rickshaw.Compat.ClassList.js')
    script(src='/src/js/Rickshaw.Graph.js')
    script(src='/src/js/Rickshaw.Graph.Renderer.js')
    script(src='/src/js/Rickshaw.Graph.Renderer.Area.js')
    script(src='/src/js/Rickshaw.Graph.Renderer.Line.js')
    script(src='/src/js/Rickshaw.Graph.Renderer.Bar.js')
    script(src='/src/js/Rickshaw.Graph.Renderer.ScatterPlot.js')
    script(src='/src/js/Rickshaw.Graph.Renderer.Stack.js')
    script(src='/src/js/Rickshaw.Graph.RangeSlider.js')
    script(src='/src/js/Rickshaw.Graph.RangeSlider.Preview.js')
    script(src='/src/js/Rickshaw.Graph.HoverDetail.js')
    script(src='/src/js/Rickshaw.Graph.Annotate.js')
    script(src='/src/js/Rickshaw.Graph.Legend.js')
    script(src='/src/js/Rickshaw.Graph.Axis.Time.js')
    script(src='/src/js/Rickshaw.Graph.Behavior.Series.Toggle.js')
    script(src='/src/js/Rickshaw.Graph.Behavior.Series.Order.js')
    script(src='/src/js/Rickshaw.Graph.Behavior.Series.Highlight.js')
    script(src='/src/js/Rickshaw.Graph.Smoother.js')
    script(src='/src/js/Rickshaw.Fixtures.Time.js')
    script(src='/src/js/Rickshaw.Fixtures.Time.Local.js')
    script(src='/src/js/Rickshaw.Fixtures.Number.js')
    script(src='/src/js/Rickshaw.Fixtures.RandomData.js')
    script(src='/src/js/Rickshaw.Fixtures.Color.js')
    script(src='/src/js/Rickshaw.Color.Palette.js')
    script(src='/src/js/Rickshaw.Graph.Axis.Y.js')
    script(src='/js/extensions.js')
  body
    #content
      form#side_panel
        section
          h3
            | rTGS | This Application plots a real time graph using CoAP Observable protocol at application layer.
          label IPV6 Address:
          input#mote-url(type='text', disabled, value='aaaa::c30c:0:0:2')
          label Request Interval (milliseconds):
          input#mote-interval(type='number', disabled, value='5000')
          button(type='button', autofocus='', disabled, onclick='javascript: execute_graph()') Start
        section
          #legend
        section
          #renderer_form.toggler
            input#area(type='radio', name='renderer', value='area', checked='')
            label(for='area') area
            input#bar(type='radio', name='renderer', value='bar')
            label(for='bar') bar
            input#line(type='radio', name='renderer', value='line')
            label(for='line') line
            input#scatter(type='radio', name='renderer', value='scatterplot')
            label(for='scatter') scatter
        section
          #offset_form
            label(for='stack')
              input#stack(type='radio', name='offset', value='zero', checked='')
              span stack
            label(for='stream')
              input#stream(type='radio', name='offset', value='wiggle')
              span stream
            label(for='pct')
              input#pct(type='radio', name='offset', value='expand')
              span pct
            label(for='value')
              input#value(type='radio', name='offset', value='value')
              span value
          #interpolation_form
            label(for='cardinal')
              input#cardinal(type='radio', name='interpolation', value='cardinal', checked='')
              span cardinal
            label(for='linear')
              input#linear(type='radio', name='interpolation', value='linear')
              span linear
            label(for='step')
              input#step(type='radio', name='interpolation', value='step-after')
              span step
        section
          h6 Smoothing
          #smoother
        section
          label Filename:
          input#inputFileNameToSaveAs(value='mote-data-logs.csv')
          button(type='button', onclick='saveTextAsFile()') Save Text to File
          label Select a File to Load:
          input#fileToLoad(type='file')
          button(type='button', onclick='loadFileAsText()') Load Selected File
        section
      #chart_container
        #chart
        #timeline
        #preview
        hr
        label File Writing
        div
          textarea#inputTextToSave(style='width:100%;height:60px')
    script.
      function addText(text) {
      document.getElementById("inputTextToSave").value += text
      }
      // Add csv clomn name for each values
      var text = "ID,MessageID,UpTime,ClockTime,Temperature,Battery,Status,RTT,Protocol\n";
      addText(text);
      // set up our data series with 150 random data points
      var seriesData = [[{ x: 0, y: 0}], [{ x: 0, y: 0}], [{ x: 0, y: 0 }], [{ x: 0, y: 0 }], [{ x: 0, y: 0 }]];
      //var random = new Rickshaw.Fixtures.RandomData(150);
      //for (var i = 0; i < 150; i++) {
      //random.addData(seriesData);}
      var palette = new Rickshaw.Color.Palette( { scheme: 'classic9' } );
      // instantiate our graph!
      var graph = new Rickshaw.Graph( {
      element: document.getElementById("chart"),
      width: 900,
      height: 500,
      renderer: 'area',
      stroke: true,
      preserve: true,
      series: [
      {
      color: palette.color(),
      data: seriesData[0],
      name: 'Temperature'
      }, {
      color: palette.color(),
      data: seriesData[1],
      name: 'Battery'
      }, {
      color: palette.color(),
      data: seriesData[2],
      name: 'Status'
      }, {
      color: palette.color(),
      data: seriesData[3],
      name: 'RTT'
      }
      ]
      } );
      graph.render();
      var preview = new Rickshaw.Graph.RangeSlider( {
      graph: graph,
      element: document.getElementById('preview'),
      } );
      var hoverDetail = new Rickshaw.Graph.HoverDetail( {
      graph: graph,
      xFormatter: function(x) {
      return new Date(x * 1000).toString();
      }
      } );
      var annotator = new Rickshaw.Graph.Annotate( {
      graph: graph,
      element: document.getElementById('timeline')
      } );
      var legend = new Rickshaw.Graph.Legend( {
      graph: graph,
      element: document.getElementById('legend')
      } );
      var shelving = new Rickshaw.Graph.Behavior.Series.Toggle( {
      graph: graph,
      legend: legend
      } );
      var order = new Rickshaw.Graph.Behavior.Series.Order( {
      graph: graph,
      legend: legend
      } );
      var highlighter = new Rickshaw.Graph.Behavior.Series.Highlight( {
      graph: graph,
      legend: legend
      } );
      var smoother = new Rickshaw.Graph.Smoother( {
      graph: graph,
      element: document.querySelector('#smoother')
      } );
      var ticksTreatment = 'glow';
      var xAxis = new Rickshaw.Graph.Axis.Time( {
      graph: graph,
      ticksTreatment: ticksTreatment,
      timeFixture: new Rickshaw.Fixtures.Time.Local()
      } );
      xAxis.render();
      var yAxis = new Rickshaw.Graph.Axis.Y( {
      graph: graph,
      tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
      ticksTreatment: ticksTreatment
      } );
      yAxis.render();
      var controls = new RenderControls( {
      element: document.querySelector('form'),
      graph: graph
      } );
      // add some data every so often
      var messages = [
      "Changed home page welcome message",
      "Minified JS and CSS",
      "Changed button color from blue to green",
      "Refactored SQL query to use indexed columns",
      "Added additional logging for debugging",
      "Fixed typo",
      "Rewrite conditional logic for clarity",
      "Added documentation for new methods"
      ];
    script.
    script(src='js/socket.io.js')
    script.
      var ip = document.getElementById('mote-url').value;
      var miliseconds = document.getElementById('mote-interval').value;
      var url = 'http://localhost:3000/getCoapData?uri=' + ip;
      var counter = 1;
      var Protocol = "CoAP";
      var socket = io();
      socket.on('wsn-data', function(payload){
      console.log(payload.data);
      // 5,15,2006, 0.0000,0.305,1
      //  MessageID, UpTime, ClockTime, Temperature, Battery, Status, RTT  //<-- This
      var string = "";
      console.log(payload.data);
      string = payload.data.split(",");
      MessageID = parseInt(string[0]);
      UpTime = parseInt(string[1]);
      ClockTime = parseInt(string[2]);
      Temperature = parseInt(string[3]);
      Battery = parseInt(string[4]);
      Status_str = string[5];
      RTT = parseInt(string[6]);
      if(Status_str == "STANDING"){Status = 1;}
      if(Status_str == "WALKING"){Status = 2;}
      if(Status_str == "RUNNING"){Status = 3;}
      if(Status_str == "FALLING"){Status = 4;}
      seriesData[0].push( { x: UpTime, y: Temperature } );
      seriesData[1].push( { x: UpTime, y: Battery } );
      seriesData[2].push( { x: UpTime, y: Status } );
      seriesData[3].push( { x: UpTime, y: RTT } );
      graph.update();
      //random.removeData(seriesData);
      //random.addData(seriesData);
      graph.update();
      var text = counter++ + "," + MessageID + "," + UpTime + "," + ClockTime + "," + Temperature + "," + Battery + "," + Status + "," + RTT + "," + Protocol + "\n";
      addText(text);
      //console.log(payload);
      });
      function addAnnotation(force) {
      if (messages.length > 0 && (force || Math.random() >= 0.95)) {
      annotator.add(seriesData[2][seriesData[2].length-1].x, messages.shift());
      annotator.update();
      }
      }
      addAnnotation(true);
      setTimeout( function() { setInterval( addAnnotation, 6000 ) }, 6000 );
      var previewXAxis = new Rickshaw.Graph.Axis.Time({
      graph: preview.graph,
      timeFixture: new Rickshaw.Fixtures.Time.Local(),
      ticksTreatment: ticksTreatment
      });
      previewXAxis.render();
      function saveTextAsFile()
      {
      var textToWrite = document.getElementById("inputTextToSave").value;
      var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
      var fileNameToSaveAs = document.getElementById("inputFileNameToSaveAs").value;
      var downloadLink = document.createElement("a");
      downloadLink.download = fileNameToSaveAs;
      downloadLink.innerHTML = "Download File";
      if (window.webkitURL != null)
      {
      // Chrome allows the link to be clicked
      // without actually adding it to the DOM.
      downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
      }
      else
      {
      // Firefox requires the link to be added to the DOM
      // before it can be clicked.
      downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
      downloadLink.onclick = destroyClickedElement;
      downloadLink.style.display = "none";
      document.body.appendChild(downloadLink);
      }
      downloadLink.click();
      }
      function destroyClickedElement(event)
      {
      document.body.removeChild(event.target);
      }
      function loadFileAsText()
      {
      var fileToLoad = document.getElementById("fileToLoad").files[0];
      var fileReader = new FileReader();
      fileReader.onload = function(fileLoadedEvent)
      {
      var textFromFileLoaded = fileLoadedEvent.target.result;
      document.getElementById("inputTextToSave").value = textFromFileLoaded;
      };
      fileReader.readAsText(fileToLoad, "UTF-8");
      }
