#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('rTGS:server');
 var http = require('http');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// create MYSQL Server connection to store data
var mysql      = require('mysql');
var connection = mysql.createConnection({
  host     : 'localhost', // default
  user     : 'root',  // default
  password : '',    // default set password 1234
  database : 'rtgs' // app database name
});
connection.connect();

// Create socket for emmitting data to view.
var io = require('socket.io')(server);
io.on('connection', function(socket){
  console.log("User Connected");
  // Not a Good Way
  socket.emit('wsn-data',{data: "1,5,7223,0,124"});

  socket.on('disconnect', function () {
    console.log("User Disconnected");
  });

});

/* GET CoAP Data. */
var Protocol = "CoAP_OBS";
var cpayload = "";  // varible to check if the current value is changed from the previous one
const StringDecoder = require('string_decoder').StringDecoder;  // decoding paylaod data
const decoder = new StringDecoder('utf8');  // character set
var URL = require('url')
var opts = URL.parse('coap://[aaaa::c30c:0:0:2]:5683/obs/mote')
opts.observe = true   //  observe resources
const coap  = require('coap'); // or coap

var c_req   = coap.request(opts);  
c_req.on('response', function(c_res) {
  var interval = setInterval(function() {
    if (cpayload != decoder.write(c_res.payload)){
      cpayload = decoder.write(c_res.payload);
  //c_res.pipe(process.stdout);
  //console.log("CoAP : " + cpayload);
  io.sockets.emit('wsn-data', {"data": cpayload}); // emit data to view/browser when response is arrived

    //  populate database
        //  MessageID, UpTime, ClockTime, Temperature, Battery, Status  //<-- This
        var string = "";
        string =String(cpayload);
        string = string.split(",");
        var MessageID = string[0];
        var UpTime = string[1];
        var ClockTime = string[2];
        var Temperature = string[3];
        var Battery = string[4];
        var Status = string[5];
        connection.query('INSERT INTO `rtgs-table` (MessageID, UpTime, ClockTime, Temperature, Battery, Status, Protocol) VALUES (\''+MessageID+'\',\''+UpTime+'\', \''+ClockTime+'\', \''+Temperature+'\', \''+Battery+'\', \''+Status+'\', \''+Protocol+'\')', function(err, rows, fields) {
          if (err) throw err;
        });

      }
    }, 100)
});
c_req.end(function closeconnection(){
    //connection.end();
  });


/*

cd ~/kontiki/examples/er-rest-example/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-coap-rtgs.upload nodeid=2 nodemac=2

cd ~/kontiki/examples/zolertia/z1/ipv6/z1-websense/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-http-rtgs.predict.upload nodeid=3 nodemac=3

cd ~/kontiki/examples/ipv6/rpl-border-router/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make border-router.upload nodeid=1 nodemac=1

cd ~/kontiki/examples/powertrace/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make example-powertrace.upload

*/