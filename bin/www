#!/usr/bin/env node


/*
MQTT:
cd ~/kontiki/examples/zolertia/z1/mqtt-z1/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-mqtt-rtgs.predict.upload nodeid=4 nodemac=4

CoAP:
cd ~/kontiki/examples/er-rest-example/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-coap-rtgs.predict.upload nodeid=2 nodemac=2

HTTP:
cd ~/kontiki/examples/zolertia/z1/ipv6/z1-websense/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make z1-http-rtgs.predict.upload nodeid=3 nodemac=3

Border Router:
cd ~/kontiki/examples/ipv6/rpl-border-router/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make border-router.upload nodeid=1 nodemac=1

Powertracing:
cd ~/kontiki/examples/powertrace/ && sudo make clean && sudo make TARGET=z1 savetarget && sudo make z1-reset && sudo make example-powertrace.upload

*/

var enable_socket = true;
console.log("Server Started at: http://localhost:3000/\n");
console.log("CoAP Socket Status: " + enable_socket + "\n");


if(enable_socket == true){
  console.log("View Socket enabled page: http://localhost:3000\n");
}
/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('rTGS:server');
 var http = require('http');
 var ping = require ("net-ping");

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
 	var port = parseInt(val, 10);

 	if (isNaN(port)) {
    // named pipe
    return val;
}

if (port >= 0) {
    // port number
    return port;
}

return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
 	if (error.syscall !== 'listen') {
 		throw error;
 	}

 	var bind = typeof port === 'string'
 	? 'Pipe ' + port
 	: 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  	case 'EACCES':
  	console.error(bind + ' requires elevated privileges');
  	process.exit(1);
  	break;
  	case 'EADDRINUSE':
  	console.error(bind + ' is already in use');
  	process.exit(1);
  	break;
  	default:
  	throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
 	var addr = server.address();
 	var bind = typeof addr === 'string'
 	? 'pipe ' + addr
 	: 'port ' + addr.port;
 	debug('Listening on ' + bind);
 }


/**
 * Event listener for Socket Based CoAP Protocol.
 */
 if(enable_socket == true){

 var io = require('socket.io')(server);
 io.on('connection', function(socket){
  console.log("User Connected");
  // Not a Good Way
  //socket.emit('wsn-data',{data: "10,100,100,100,100"});

  socket.on('disconnect', function () {
    console.log("User Disconnected");
  });

});

var c_payload 	= "";  // varible to check if the current value is changed from the previous one
var duration_sec= "nil";
var n_hops 		= "1";
var mote_uri 	= 'aaaa::c30c:0:0:2';
var MessageID   = "nil";
var UpTime      = "nil";
var ClockTime   = "nil";
var Temperature = "nil";
var Battery     = "nil";
var PowTrace    = "nil";
var RTT 		= "nil";

/*-------------------- PING Lib Configs ---------------------*/
// Default options
var options = {
	networkProtocol: ping.NetworkProtocol.IPv6,
	packetSize: 64,	// enough
	retries: 1,
	sessionId: (process.pid % 65535),	//why ?
	timeout: 10000,
	ttl: 128
};
var session = ping.createSession (options);

session.on ("error", function (error) {
	console.trace (error.toString ());
});
/*-------------------- End PING Lib Configs ------------------*/

var request_counter = 1;
const StringDecoder = require('string_decoder').StringDecoder;
const decoder = new StringDecoder('utf8');
// create MYSQL Server connection to store data
var mysql      = require('mysql');
var connection = mysql.createConnection({
host     : 'localhost', // default
user     : 'root',  // default
password : '',  // default
database : 'rtgs-db' // app database name
});
connection.connect();

var URL = require('url')
var opts = URL.parse('coap://['+ mote_uri +']:5683/obs/moves')
var request_counter = 1;
opts.observe = true   //  observe resources
const coap  = require('coap'); // or coap

var c_req   = coap.request(opts);  

/* GET CoAP Data. */

/*-------------------- get Round Trip Time ---------------------*/
session.pingHost (mote_uri, function (rtt_error, mote_uri, sent, rcvd) {
	RTT = rcvd - sent;
        //console.log ("Target " + mote_uri + ": RTT (ms=" + RTT + ")");

        if(!rtt_error){
        	/*-------------------- get Payload ---------------------*/
        // CoAP_0.5Sec_3Hop
        var Protocol = 'CoAP_OBS_'+ duration_sec +'Sec_'+ n_hops +'Hop';
        c_req.on('response', function(c_res) {
            //console.info("RTT: %dms", RTT);
            if (!c_res.payload){
            	return;	
            }
            var interval = setInterval(function() {
            	if (c_payload != decoder.write(c_res.payload)){
            		c_payload = decoder.write(c_res.payload);
            //  populate database
            //  MessageID, UpTime, ClockTime, Temperature, Battery, Status, RTT  //<-- This
            var string = "";
            string =String(c_payload);
            string = string.split(",");
            MessageID   = (string[0]) ? string[0] : '0' ;
            UpTime      = (string[1]) ? string[1] : '0' ;
            ClockTime   = (string[2]) ? string[2] : '0' ;
            Temperature = (string[3]) ? string[3] : '0' ;
            Battery     = (string[4]) ? string[4] : '0' ;
            Status    	= (string[5]) ? string[5] : '0' ;
            connection.query('INSERT INTO `rtgs-tbl` (MessageID, UpTime, ClockTime, Temperature, Battery, Status, Protocol, RTT) VALUES (\''+MessageID+'\',\''+UpTime+'\', \''+ClockTime+'\', \''+Temperature+'\', \''+Battery+'\', \''+Status+'\', \''+Protocol+'\', \''+RTT+'\')', function(err, rows, fields) {
              if (err) throw err;
            });
            //console.log(c_payload + "," + RTT);
	      	io.sockets.emit('wsn-data', {"data": c_payload + "," + RTT}); // emit data to view/browser when response is arrived
	      }
	  }, 100)
        })
        c_req.on('error', function(c_res) {
        	request_counter = request_counter + 1;
        	console.log("[===============< " + request_counter + " >===============]\n");
        	console.log(c_res);
        	console.log("[==================================]\n");
        	return;
        })
        c_req.end()

        /*-------------------- End get Payload ---------------------*/
    }else{
    	console.log("CoAP: Ping failed, Device is not reachable, Trying again ... \n");
          return;	// No RTT
      }

  });
/*-------------------- End get Round Trip Time ---------------------*/


} // enable_socket condition
